cmake_minimum_required(VERSION 3.15)
set(CMAKE_CXX_STANDARD 17)

set(BASE_PATH ${CMAKE_SOURCE_DIR}/src/com/header)
set(LIBRARY_PATH ${CMAKE_SOURCE_DIR}/lib)
set(SOURCE src/com/impl/qubedit)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLES OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_SHARED   ON CACHE BOOL " " FORCE)

project(Qubedit)

# Add the configurations from nanogui
add_subdirectory(ext/nanogui)  # this executes ext/nanogui/CMakeLists.txt for you

# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})

# On top of adding the path to nanogui/include, you may need extras
include_directories(ext/nanogui/include) # make sure you have this
include_directories(${NANOGUI_EXTRA_INCS}) # where GLFW, Eigen, etc come from

add_executable(Qubedit ${SOURCE}/core/Main.cpp)

# Lastly, additional libraries may have been built for you.  In addition to linking
# against NanoGUI, we need to link against those as well.
target_link_libraries(Qubedit nanogui ${NANOGUI_EXTRA_LIBS})

target_include_directories(Qubedit PUBLIC ${BASE_PATH})
target_include_directories(Qubedit PUBLIC ${CMAKE_SOURCE_DIR}/../QubeEngine/src/com/header)

#include_directories(${CMAKE_SOURCE_DIR}/../QubeEngine/include)
